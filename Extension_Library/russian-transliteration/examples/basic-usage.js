/**
 * Basic Usage Examples for Russian Cyrillic to Latin Transliteration
 * Demonstrates various features of the russian-transliteration library
 */

// Import the library
import russianTranslit from '../src/index.js';
import { 
  RussianTransliterator, 
  transliterate, 
  analyze,
  transliterateWith,
  getAvailableSystems,
  compareTransliterations
} from '../src/index.js';

console.log('üá∑üá∫ Russian Transliteration Library Examples\n');

// Example 1: Basic transliteration
console.log('=== Basic Transliteration ===');
console.log(transliterate('–ü—Ä–∏–≤–µ—Ç'));          // privet
console.log(transliterate('–º–∏—Ä'));             // mir
console.log(transliterate('–†–æ—Å—Å–∏—è'));          // rossiya
console.log(transliterate('—Å–ø–∞—Å–∏–±–æ'));         // spasibo
console.log(transliterate('–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è'));     // do svidaniya

// Example 2: Complex sentences
console.log('\n=== Complex Sentences ===');
console.log(transliterate('–Ø –∏–∑—É—á–∞—é —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫'));           // ya izuchayu russkij yazyk
console.log(transliterate('–ú–æ—Å–∫–≤–∞ - —Å—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏'));         // moskva - stolitsa rossii
console.log(transliterate('–ö–∞–∫ –¥–µ–ª–∞? –í—Å—ë —Ö–æ—Ä–æ—à–æ!'));          // kak dela? vsyo khorosho!
console.log(transliterate('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥')); // dobro pozhalovat' v sankt-peterburg

// Example 3: Different romanization systems
console.log('\n=== Different Romanization Systems ===');
const testText = '–•–æ—Ä–æ—à–æ';

console.log('Available systems:');
getAvailableSystems().forEach(sys => {
  console.log(`- ${sys.id}: ${sys.name}`);
});

console.log('\nSame text in different systems:');
console.log('GOST:      ', transliterateWith(testText, 'gost'));       // khorosho
console.log('BGN:       ', transliterateWith(testText, 'bgn'));        // khorosho
console.log('Scientific:', transliterateWith(testText, 'scientific'));  // khorosho
console.log('Simplified:', transliterateWith(testText, 'simplified'));  // horosho

// Example 4: System comparison
console.log('\n=== System Comparison ===');
const comparison = compareTransliterations('–©—ë–ª–∫–æ–≤–æ');
console.log('Text: –©—ë–ª–∫–æ–≤–æ');
Object.entries(comparison).forEach(([system, result]) => {
  console.log(`${system.padEnd(10)}: ${result}`);
});

// Example 5: Custom transliterator options
console.log('\n=== Custom Options ===');

// Preserve case
const preserveCase = new RussianTransliterator({ preserveCase: true });
console.log('Preserve case:', preserveCase.transliterate('–ú–û–°–ö–í–ê –ü—Ä–∏–≤–µ—Ç'));

// Show untranslated
const showUntrans = new RussianTransliterator({ showUntranslated: true });
console.log('Show untranslated:', showUntrans.transliterate('–ü—Ä–∏–≤–µ—Ç XYZ –º–∏—Ä'));

// Character-first (no word matching)
const charFirst = new RussianTransliterator({ wordFirst: false });
console.log('Character-first:', charFirst.transliterate('—Å–ø–∞—Å–∏–±–æ'));

// Simplified system
const simplified = new RussianTransliterator({ system: 'simplified' });
console.log('Simplified system:', simplified.transliterate('–•–æ—Ä–æ—à–æ'));

// Example 6: Text analysis
console.log('\n=== Text Analysis ===');
const analysis = analyze('–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –í–ª–∞–¥–∏–º–∏—Ä. –Ø –∏–∑—É—á–∞—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ.');
console.log('Original text:', analysis.originalText);
console.log('Transliteration:', analysis.transliteration);
console.log('Total characters:', analysis.totalCharacters);
console.log('Cyrillic characters:', analysis.cyrillicCharacters);
console.log('Coverage:', (analysis.coverage * 100).toFixed(1) + '%');
console.log('System used:', analysis.system);
console.log('Is Russian:', analysis.isRussian);
console.log('Difficulty level:', analysis.difficulty.level);
console.log('Average word length:', analysis.difficulty.avgWordLength);

// Character breakdown
console.log('\nCharacter breakdown (first 10):');
analysis.characterBreakdown.slice(0, 10).forEach(char => {
  console.log(`${char.character} -> ${char.romanized} ${char.found ? '‚úì' : '‚úó'}`);
});

// Example 7: Batch transliteration
console.log('\n=== Batch Transliteration ===');
const russianTexts = [
  '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ',
  '–î–æ–±—Ä—ã–π –¥–µ–Ω—å', 
  '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä',
  '–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏',
  '–£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞'
];

const results = russianTranslit.transliterateBatch(russianTexts);
results.forEach((result, index) => {
  console.log(`${russianTexts[index]} -> ${result}`);
});

// Example 8: Utility functions
console.log('\n=== Utility Functions ===');

// Check for Cyrillic characters
console.log('Has Cyrillic:', russianTranslit.hasCyrillicCharacters('Hello –ü—Ä–∏–≤–µ—Ç World')); // true
console.log('Has Cyrillic:', russianTranslit.hasCyrillicCharacters('Hello World')); // false

// Extract Cyrillic characters
const mixed = 'Hello –ü—Ä–∏–≤–µ—Ç World –º–∏—Ä!';
const cyrillicChars = russianTranslit.extractCyrillicCharacters(mixed);
console.log('Cyrillic chars:', cyrillicChars); // ['–ü', '—Ä', '–∏', '–≤', '–µ', '—Ç', '–º', '–∏', '—Ä']

// Text segmentation
const segments = russianTranslit.segmentText('–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?');
console.log('Segments:', segments); // ['–ü—Ä–∏–≤–µ—Ç', ',', '–∫–∞–∫', '–¥–µ–ª–∞', '?']

// Reading difficulty
const difficulty = russianTranslit.getReadingDifficulty('–≠—Ç–æ —Å–ª–æ–∂–Ω—ã–π –Ω–∞—É—á–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ –∫–≤–∞–Ω—Ç–æ–≤—É—é –º–µ—Ö–∞–Ω–∏–∫—É –∏ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫—É—é —Ñ–∏–∑–∏–∫—É.');
console.log('Difficulty:', difficulty.level, 'Score:', difficulty.score);
console.log('Words:', difficulty.wordCount, 'Avg length:', difficulty.avgWordLength);

// Mixed script detection
const mixedScript = russianTranslit.detectMixedScript('Hello –ü—Ä–∏–≤–µ—Ç –º–∏—Ä world');
console.log('Mixed script:', mixedScript.isMixed);
console.log('Cyrillic ratio:', mixedScript.cyrillicRatio);
console.log('Latin ratio:', mixedScript.latinRatio);

// Example 9: Name transliteration
console.log('\n=== Name Transliteration ===');
const russianNames = ['–í–ª–∞–¥–∏–º–∏—Ä', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–ù–∞—Ç–∞–ª—å—è', '–î–º–∏—Ç—Ä–∏–π'];

russianNames.forEach(name => {
  const transliterated = russianTranslit.transliterateName(name);
  console.log(`${name} -> ${transliterated}`);
});

// Example 10: Text cleaning
console.log('\n=== Text Cleaning ===');
const messyText = '  –ü—Ä–∏–≤–µ—Ç,,,   –º–∏—Ä!!!   ';
const cleaned = russianTranslit.cleanText(messyText, {
  removeExtraSpaces: true,
  normalizeQuotes: true,
  normalizeDashes: true
});
console.log('Original:', `"${messyText}"`);
console.log('Cleaned:', `"${cleaned}"`);

// Example 11: Word extraction
console.log('\n=== Russian Word Extraction ===');
const mixedText = 'I love –∏–∑—É—á–µ–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ and programming –∫–æ–¥';
const russianWords = russianTranslit.extractRussianWords(mixedText);
console.log('Russian words found:', russianWords);

// Example 12: Syllable counting
console.log('\n=== Syllable Counting ===');
const words = ['–ø—Ä–∏–≤–µ—Ç', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–¥–∞', '—Ö–æ—Ä–æ—à–æ', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç'];
words.forEach(word => {
  const syllables = russianTranslit.countSyllables(word);
  console.log(`${word}: ${syllables} syllable${syllables !== 1 ? 's' : ''}`);
});

// Example 13: Name detection
console.log('\n=== Name Detection ===');
const testWords = ['–ú–æ—Å–∫–≤–∞', '–ø—Ä–∏–≤–µ—Ç', '–í–ª–∞–¥–∏–º–∏—Ä', '—Ö–æ—Ä–æ—à–æ', '–ü–µ—Ç—Ä–æ–≤'];
testWords.forEach(word => {
  const isName = russianTranslit.isLikelyRussianName(word);
  console.log(`${word}: ${isName ? 'likely name' : 'not a name'}`);
});

// Example 14: Punctuation normalization
console.log('\n=== Punctuation Normalization ===');
const russianPunct = '–û–Ω —Å–∫–∞–∑–∞–ª: ¬´–ü—Ä–∏–≤–µ—Ç!¬ª ‚Äî –∏ —É—à—ë–ª...';
const normalized = russianTranslit.normalizePunctuation(russianPunct);
console.log('Original:', russianPunct);
console.log('Normalized:', normalized);

// Example 15: Reverse transliteration (experimental)
console.log('\n=== Reverse Transliteration (Experimental) ===');
const latinText = 'privet mir kak dela';
const reversed = russianTranslit.reverseTransliterate(latinText);
console.log('Latin:', latinText);
console.log('Reversed:', reversed);

// Example 16: Library information
console.log('\n=== Library Information ===');
const info = russianTranslit.getTransliteratorInfo();
console.log('Characters available:', info.totalCharacters);
console.log('Words available:', info.totalWords);
console.log('Current system:', info.currentSystem);
console.log('Available systems:', info.availableSystems);
console.log('Version:', info.version);
console.log('Features:', info.supportedFeatures.join(', '));

// Example 17: Advanced transliterator usage
console.log('\n=== Advanced Transliterator Usage ===');
const advanced = new RussianTransliterator({
  system: 'scientific',
  preserveCase: true,
  handleCombinations: true,
  wordFirst: true,
  showUntranslated: true
});

console.log('Advanced result:', advanced.transliterate('–ë–æ–ª—å—à–æ–µ –°–ø–∞—Å–∏–±–æ!'));

// Get stats
const stats = advanced.getStats();
console.log('Advanced stats:', {
  system: stats.currentSystem,
  features: stats.supportedFeatures.length
});

// Switch system
advanced.setSystem('simplified');
console.log('After switching to simplified:', advanced.transliterate('–ë–æ–ª—å—à–æ–µ –°–ø–∞—Å–∏–±–æ!'));

// Example 18: Error handling
console.log('\n=== Error Handling ===');
try {
  console.log('Empty string:', `"${transliterate('')}"`);
  console.log('Null input:', `"${transliterate(null)}"`);
  console.log('Number input:', `"${transliterate(123)}"`);
} catch (error) {
  console.log('Error caught:', error.message);
}

// Example 19: Performance test
console.log('\n=== Performance Test ===');
const largeText = '–ü—Ä–∏–≤–µ—Ç –º–∏—Ä –∫–∞–∫ –¥–µ–ª–∞ '.repeat(50); // 1000 characters

console.log(`Testing with ${largeText.length} characters...`);
const startTime = Date.now();
const perfResult = transliterate(largeText);
const endTime = Date.now();

console.log(`Processed in ${endTime - startTime}ms`);
console.log(`Result length: ${perfResult.length} characters`);
console.log(`Speed: ${Math.round(largeText.length / (endTime - startTime) * 1000)} chars/second`);

console.log('\n=== All Examples Complete ===');
console.log('üéâ Russian transliteration library is working correctly!');